generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 회원정보
model User {
  id              Int               @id @default(autoincrement())
  email           String            @map("email") @db.VarChar(100)
  password        String            @map("password") @db.VarChar(255)
  name            String            @map("name") @db.VarChar(100)
  mobilePhone     String            @map("mobile_phone") @db.VarChar(15)
  image           String?           @map("image") @db.VarChar(2000)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp(0)
  accountProvider AccountProvider[]
  customerInfo    CustomerInfo[]

  @@unique([email, mobilePhone])
  @@map("user")
}

enum Provider {
  GOOGLE
  KAKAO
  NAVER
}

// OAuth 2 연결 정보 (구글, 카카오, 네이버)
model AccountProvider {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  provider  Provider
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ACCOUNT_PROVIDER_USER_USER_ID")

  @@index([userId], map: "IDX_ACCOUNT_PROVIDER_USER_ID")
  @@map("account_provider")
}

// 고객정보 (회원 + 비회원) -> 상품구매 시 해당 정보 저장 & 읽기
model CustomerInfo {
  id            Int       @id @default(autoincrement())
  userId        Int?      @map("user_id")
  email         String    @map("email") @db.VarChar(100)
  name          String    @map("name") @db.VarChar(100)
  mobilePhone   String    @map("mobile_phone") @db.VarChar(15)
  phone         String?   @map("phone") @db.VarChar(15)
  zipCode       String?   @map("zip_code") @db.Char(5)
  addressBase   String?   @map("address_base") @db.VarChar(255)
  addressDetail String?   @map("address_detail") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp(0)
  user          User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUSTOMER_INFO_USER_USER_ID")

  @@index([userId], map: "IDX_CUSTOMER_INFO_USER_ID")
  @@map("customer_info")
}
